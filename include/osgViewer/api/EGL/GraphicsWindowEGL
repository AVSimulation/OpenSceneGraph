/* -*-c++-*- OpenSceneGraph - Copyright (C) 1998-2006 Robert Osfield 
 *
 * This library is open source and may be redistributed and/or modified under  
 * the terms of the OpenSceneGraph Public License (OSGPL) version 0.0 or 
 * (at your option) any later version.  The full license is in LICENSE file
 * included with this distribution, and on the openscenegraph.org website.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
 * OpenSceneGraph Public License for more details.
*/

/* Note, elements of GraphicsWindowEGL have used Prodcer/RenderSurface_EGL.cpp as both
 * a guide to use of EGL/GLX and copiying directly in the case of setBorder().
 * These elements are license under OSGPL as above, with Copyright (C) 2001-2004  Don Burns.
 */

#ifndef OSGVIEWER_GRAPHICSWINDOWEGL
#define OSGVIEWER_GRAPHICSWINDOWEGL 1

#include <osgViewer/GraphicsWindow>
#include <osgViewer/api/EGL/GraphicsHandleEGL>

#include <string.h>

namespace osgViewer
{

class OSGVIEWER_EXPORT GraphicsWindowEGL : public osgViewer::GraphicsWindow, public osgViewer::GraphicsHandleEGL
{
    public:

        GraphicsWindowEGL(osg::GraphicsContext::Traits* traits):
            _valid(false),
            _initialized(false),
            _realized(false)
        {
            _traits = traits;
            init();
            
            if (valid())
            {
                setState( new osg::State );
                getState()->setGraphicsContext(this);

                if (_traits.valid() && _traits->sharedContext.valid())
                {
                    getState()->setContextID( _traits->sharedContext->getState()->getContextID() );
                    incrementContextIDUsageCount( getState()->getContextID() );   
                }
                else
                {
                    getState()->setContextID( osg::GraphicsContext::createNewContextID() );
                }

            }
        }
    
        virtual bool isSameKindAs(const Object* object) const { return dynamic_cast<const GraphicsWindowEGL*>(object)!=0; }
        virtual const char* libraryName() const { return "osgViewer"; }
        virtual const char* className() const { return "GraphicsWindowEGL"; }

        virtual bool valid() const { return _valid; }

        /** Realise the GraphicsContext.*/
        virtual bool realizeImplementation();

        /** Return true if the graphics context has been realised and is ready to use.*/
        virtual bool isRealizedImplementation() const { return _realized; }

        /** Close the graphics context.*/
        virtual void closeImplementation();

        /** Make this graphics context current.*/
        virtual bool makeCurrentImplementation();

        /** Release the graphics context.*/
        virtual bool releaseContextImplementation();

        /** Swap the front and back buffers.*/
        virtual void swapBuffersImplementation();
        
        /** Check to see if any events have been generated.*/
        virtual bool checkEvents();

        /** Get focus.*/
        virtual void grabFocus();
        
        /** Get focus on if the pointer is in this window.*/
        virtual void grabFocusIfPointerInWindow();

        /** Set the name of the window */
        virtual void setWindowName(const std::string& name);

        /** Set mouse cursor to a specific shape.*/
        virtual void setCursor(MouseCursor cursor);

        /** WindowData is used to pass in the EGL window handle attached the GraphicsContext::Traits structure. */
        struct WindowData : public osg::Referenced
        {
            WindowData(Window window):
                _window(window) {}
                
            Window          _window;
        }; 

    protected:
    
        ~GraphicsWindowEGL();
    
        bool createVisualInfo();
        
        void init();
       
        bool            _valid;
        Pbuffer         _pbuffer;

        bool            _initialized;
        bool            _realized;

		EGLint 			_numConfigs;
		EGLConfig 		_eglCfg;
};

}

#endif
